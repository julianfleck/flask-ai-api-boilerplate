version: '3.8'

services:
  api:
    build:
      context: .
      target: api
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${API_PORT:-5000}:${API_PORT:-5000}"
      - "${DEBUGPY_PORT:-5678}:${DEBUGPY_PORT:-5678}"
    env_file: .env
    volumes:
      - ./src/flask_structured_api:/app/src/flask_structured_api
      - backup_data:/backups
    command: >
      sh -c "if [ \"$${ENVIRONMENT:-development}\" = \"development\" ]; then
        flask run --host=0.0.0.0 --debug;
      else
        gunicorn --workers $${GUNICORN_WORKERS:-4} --bind $${API_HOST:-0.0.0.0}:$${API_PORT:-5000} 'flask_structured_api.main:app';
      fi"
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-api}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backup:
    build:
      context: .
      target: backup
    volumes:
      - backup_data:/backups
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-api}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-@daily}
    networks:
      - app_network
    entrypoint: ["/app/docker/backup/entrypoint.sh"]
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --bind 0.0.0.0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

volumes:
  postgres_data:
  backup_data:
  redis_data: 

networks:
  app_network:
    driver: bridge 