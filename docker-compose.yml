version: '3.8'

services:
  api:
    build:
      context: .
      target: api
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${API_PORT}:${API_PORT}"
      - "${DEBUGPY_PORT}:${DEBUGPY_PORT}"
    env_file:
      - .env
    environment:
      - FLASK_APP=${FLASK_APP}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - DEBUGPY_FLAG=--debugpy
    volumes:
      - .:/app
      - backup_data:/backups
    entrypoint: ["/app/docker/entrypoint.sh"]
    depends_on:
      - db
      - redis
    networks:
      - app_network

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=api
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U user -d api"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backup:
    build:
      context: .
      target: backup
    volumes:
      - backup_data:/backups
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=api
      - BACKUP_SCHEDULE=@daily
    networks:
      - app_network
    entrypoint: ["/app/docker/entrypoint.backup.sh"]
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --bind 0.0.0.0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

volumes:
  postgres_data:
  backup_data:
  redis_data: 

networks:
  app_network:
    driver: bridge 